plugins {
	id 'java'
	id 'edu.sc.seis.launch4j' version '4.0.0'
	id 'de.undercouch.download' version '5.6.0'
}

repositories {
	mavenCentral()
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

/* Would be nice to use javafx for finos perspective integration but as of now webassembly and workers are not supported
   keeping definitions here for further reference */
//	id "org.openjfx.javafxplugin" version "0.0.12"
//javafx {
////	version = '17.0.0.1'
//	version = '19-ea+3'
//	modules = ['javafx.swing', 'javafx.web']
//}

sourceSets {
	main.resources.srcDir 'src/main/html'
}

compileJava {
	options.encoding = 'UTF-8'
	options.warnings = true
	options.deprecation = true
	options.debug = true
	options.compilerArgs = [
			'-Xlint:unchecked',
			'--add-exports', 'java.desktop/com.sun.java.swing.plaf=ALL-UNNAMED'
	]
}

dependencies {
	// flatlaf 2.2 has troubles with JSplitPane programmatic divider positioning
	implementation 'com.formdev:flatlaf:3.6.1'
	implementation 'com.formdev:flatlaf-extras:3.6.1'
	implementation 'com.formdev:flatlaf-intellij-themes:3.6.1'

	// https://github.com/DJ-Raven/swing-toast-notifications
	implementation files('libs/swing-toast-notifications-1.0.3.jar')

	implementation 'org.drjekyll:fontchooser:3.1.0'
	implementation 'org.nanohttpd:nanohttpd-websocket:2.3.1'
	implementation 'com.google.code.gson:gson:2.13.1'

	testImplementation 'junit:junit:4.13.2'
	compileOnly 'org.jetbrains:annotations:24.1.0'
}

def myVersion = 'dev'
file('CHANGELOG.md').find {
	if (it.startsWith('## v')) {
		myVersion = it.substring(3)
		return true
	}
}

jar {
	manifest {
		attributes(
				"Implementation-Version": myVersion,
				"Main-Class": 'org.riekr.jloga.Main'
		)
	}
}

tasks.register('fatJar', Jar) {
	group "build"
	manifest.from jar.manifest
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	archiveClassifier.set('all')
	from sourceSets.main.output
	dependsOn configurations.runtimeClasspath
	from {
		configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }
				.collect {
					zipTree(it).matching {
						exclude('FontChooser*.properties')
					}
				}
	}
}

launch4j {
	// https://github.com/TheBoegl/gradle-launch4j
	mainClassName = 'org.riekr.jloga.Main'
	// convert icon.png -resize 256x256 -channel rgb -negate icon.ico
	icon = "${projectDir}/src/main/resources/org/riekr/jloga/icon.ico"
	jarTask = fatJar
	copyConfigurable = []
	version = myVersion
	textVersion = 'v' + myVersion
	setCopyright('https://github.com/Riekr/jloga')
	setSupportUrl('https://github.com/Riekr/jloga/issues')
	setDownloadUrl('https://adoptium.net/temurin/releases')
}

tasks.register('updatePerspective') {
	// https://github.com/michel-kraemer/gradle-download-task
	doLast {
		// https://perspective.finos.org/guide/how_to/javascript/importing.html
		def repo = 'https://cdn.jsdelivr.net/npm/@finos'
		def ver = '@3.7.4'
		def local = 'src/main/html/org/riekr/jloga/http/perspective/'
		def wasm = "${local}/wasm"
		def css = []
		// https://cdn.jsdelivr.net/npm/@finos/perspective/dist/cdn/
		download.run { src "${repo}/perspective${ver}/dist/cdn/perspective.js"; dest local }
		download.run { src "${repo}/perspective${ver}/dist/cdn/perspective-server.worker.js"; dest local }
		download.run { src "${repo}/perspective${ver}/dist/wasm/perspective-server.wasm"; dest wasm }
		// https://cdn.jsdelivr.net/npm/@finos/perspective-viewer/dist/cdn/
		download.run { src "${repo}/perspective-viewer${ver}/dist/cdn/perspective-viewer.js"; dest local }
		download.run { src "${repo}/perspective-viewer${ver}/dist/wasm/perspective-viewer.wasm"; dest wasm }
		css.add("${repo}/perspective-viewer${ver}/dist/css/themes.css")
		// https://cdn.jsdelivr.net/npm/@finos/perspective-viewer-datagrid/dist/cdn/
		download.run { src "${repo}/perspective-viewer-datagrid${ver}/dist/cdn/perspective-viewer-datagrid.js"; dest local }
		css.add("${repo}/perspective-viewer-datagrid${ver}/dist/css/perspective-viewer-datagrid.css")
		css.add("${repo}/perspective-viewer-datagrid${ver}/dist/css/perspective-viewer-datagrid-toolbar.css")
		// https://cdn.jsdelivr.net/npm/@finos/perspective-viewer-d3fc/dist/cdn/
		download.run { src "${repo}/perspective-viewer-d3fc${ver}/dist/cdn/perspective-viewer-d3fc.js"; dest local }
		css.add("${repo}/perspective-viewer-d3fc${ver}/dist/css/perspective-viewer-d3fc.css")

		// you can set "wgetExec" in "gradle.properties" file in the same folder of this one (useful for cygwin)
		delete(file("${local}/res"))
		def wget = project.findProperty('wgetExec') ?: 'wget'

		css.each { file ->
			exec {
				workingDir "${local}"
				executable wget
				args(['-q',
				      '--page-requisites',
				      '--convert-links',
				      '-e', 'robots=off',
				      '--span-hosts',
				      '--restrict-file-names=windows',
				      '--directory-prefix=res',
				      '--adjust-extension',
				      file
				])
			}
		}

		for (final def f in file("${local}/res/cdn.jsdelivr.net/npm/@finos").listFiles()) {
			if (f.isDirectory() && f.name.endsWith(ver)) {
				f.renameTo(f.absolutePath.replace(ver, ''))
			}
		}
	}
}

artifacts {
	archives fatJar
}